import re
import matplotlib.pyplot as plt

# Função para extrair os valores do texto
def extrair_valores(texto):
    # Expressões regulares para encontrar os valores
    teste_pattern = r"Teste (\d+):"
    tempo_pattern = r"Elapsed Time: (\d+\.\d+) seconds"
    mae_pattern = r"MAE: (\d+\.\d+)"
    mse_pattern = r"MSE: ([\d+\.]+e?-?\d+)"
    r2_pattern = r"R2: (\d+\.\d+)"

    # Procura por padrões no texto
    teste_match = re.search(teste_pattern, texto)
    tempo_match = re.findall(tempo_pattern, texto)
    mae_match = re.findall(mae_pattern, texto)
    mse_match = re.findall(mse_pattern, texto)
    r2_match = re.findall(r2_pattern, texto)

    # Se não encontrar algum valor, retorna None
    if teste_match is None or tempo_match is None or mae_match is None or mse_match is None or r2_match is None:
        return None

    # Extrai os valores encontrados
    teste = int(teste_match.group(1))
    tempos = [float(tempo) for tempo in tempo_match]
    maes = [float(mae) for mae in mae_match]
    mses = [float(mse) for mse in mse_match]
    r2s = [float(r2) for r2 in r2_match]

    return teste, tempos, maes, mses, r2s

# Função para plotar os dados
def plotar_grafico(teste, tempos, maes, mses, r2s, populacao):
    # Calculando a média das métricas
    media_mae = sum(maes) / len(maes) if maes else 0
    media_mse = sum(mses) / len(mses) if mses else 0
    media_r2 = sum(r2s) / len(r2s) if r2s else 0

    # Plotando o tempo decorrido
    plt.figure(figsize=(10, 6))
    plt.plot(tempos, label="Tempo decorrido", marker='o')
    plt.xlabel("Execução")
    plt.ylabel("Tempo (segundos)")
    plt.title(f"Teste {teste} - Tempo Decorrido")
    plt.xticks(range(len(tempos)))
    plt.grid(True)
    plt.legend()

    # Salvando o gráfico como arquivo PNG
    plt.savefig(f"teste_{teste}_tempo.png")
    plt.close()

    # Plotando MAE, MSE e R2
    plt.figure(figsize=(10, 6))
    plt.plot(maes, label="MAE", marker='o')
    plt.plot(mses, label="MSE", marker='o')
    plt.plot(r2s, label="R2", marker='o')
    
    # Plotando a média das métricas
    plt.axhline(y=media_mae, color='r', linestyle='--', label=f"MAE médio: {media_mae:.2f}")
    plt.axhline(y=media_mse, color='g', linestyle='--', label=f"MSE médio: {media_mse:.2f}")
    plt.axhline(y=media_r2, color='b', linestyle='--', label=f"R2 médio: {media_r2:.2f}")

    plt.xlabel("Execução")
    plt.ylabel("Valor")
    plt.title(f"Teste {teste} - MAE, MSE, R2")
    plt.xticks(range(len(tempos)))
    plt.grid(True)
    plt.legend()

    # Salvando o gráfico como arquivo PNG
    plt.savefig(f"teste_{teste}_metricas.png")
    plt.close()


# Texto fornecido
texto = """
Teste 1:
Elapsed Time: 1829.27 seconds
Fit: 9995.71
path
MAE: 9995.71
MSE: 9.99143e+07
R2: 0.99526

Elapsed Time: 1842.47 seconds
Fit: 10471.4
path
MAE: 10471.4
MSE: 1.09649e+08
R2: 0.98567 

Elapsed Time: 1834.21 seconds
Fit: 10496.5
path
MAE: 10496.5
MSE: 1.10175e+08
R2: 0.98502 

Elapsed Time: 1851.28 seconds
Fit: 9722.51
path
MAE: 9722.51
MSE: 9.45271e+07
R2: 0.99843

Elapsed Time: 1848.19 seconds
Fit: 10101.2
path
MAE: 10101.2
MSE: 1.02035e+08
R2: 0.99358 

Teste 2:
Elapsed Time: 1120.24 seconds
Fit: 10388.4
path
MAE: 1036.42
MSE: 1.07417e+006
R2: 0.990047

Elapsed Time: 938.863 seconds
Fit: 10298.9
path
MAE: 946.916
MSE: 896650
R2: 0.991546

Elapsed Time: 926.236 seconds
Fit: 10193.7
path
MAE: 841.653
MSE: 708379
R2: 0.993183

Elapsed Time: 972.789 seconds
Fit: 10098.4
path
MAE: 746.434
MSE: 557164
R2: 0.994536

Teste 3:
Elapsed Time: 1363.74 seconds
Fit: 10261
path
MAE: 908.987
MSE: 826256
R2: 0.992152

Elapsed Time: 1380.42 seconds
Fit: 10121.9
path
MAE: 769.947
MSE: 592818
R2: 0.994214

Elapsed Time: 1389.44 seconds
Fit: 9983.84
path
MAE: 631.835
MSE: 399216
R2: 0.995995

Elapsed Time: 1395.27 seconds
Fit: 10165.2
path: 53 54 48 49 41 43 40 45 47 42 46 38 33 39 37 34 30 31 29 18 14 11 9 8 4 2 1 3 0 5 7 15 35 62 19 64 84 85 97 89 88 93 98 100 103 110 113 112 108 101 86 79 81 61 58 70 75 74 77 73 68 71 24 22 12 13 10 6 16 25 23 20 17 32 59 69 76 78 80 82 87 90 102 92 95 94 91 96 107 106 104 105 117 130 135 154 150 146 140 151 152 149 143 138 137 121 118 125 124 126 129 131 133 136 139 141 145 148 144 155 160 162 163 153 156 168 175 181 171 178 185 182 186 193 189 191 190 188 187 192 184 179 177 180 183 173 172 174 176 167 164 158 157 161 166 169 170 165 159 147 142 134 128 132 127 123 122 119 120 116 115 114 111 109 99 83 72 66 60 65 67 63 56 44 27 28 21 26 36 50 57 55 52 51
MAE: 813.186
MSE: 661271
R2: 0.9936

Elapsed Time: 1390.47 seconds
Fit: 10014.9
path
MAE: 662.925
MSE: 439469
R2: 0.995618
"""

# População para cada teste
populacao = {1: 31, 2: 67, 3: 103}

# Dividindo o texto em partes separadas para cada teste
testes = texto.split("Teste")

# Iterando sobre cada parte do texto
for parte in testes[1:]:
    # Extrai os valores de cada parte
    valores = extrair_valores("Teste" + parte)

    # Se os valores forem extraídos com sucesso, plotar o gráfico
    if valores:
        teste, tempos, maes, mses, r2s = valores
        plotar_grafico(teste, tempos, maes, mses, r2s, populacao[teste])

print("Gráficos gerados com sucesso!")